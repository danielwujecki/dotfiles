#!/usr/bin/env bash
set -euo pipefail

#
# general checks
#

if [[ $# -gt 1 ]] ; then
    echo "To many arguments!"
    exit 1
fi

if [[ $EUID -ne 0 ]] ; then
    echo "Please run as root"
    exit 1
fi

#
# set variables
#

KEEP_VERS="${KEEP_VERS:-3}"
if [[ $# -eq 1 ]] ; then
    version_long="$1"
else
    version_long="$(eselect kernel list | awk '/linux/ { print $2 }' | sort -V | tail -n1)"
fi
version_short="$(echo "$version_long" | sed s/linux-//g)"

new_build="y"
[[ -f /boot/vmlinuz-$version_short ]] && new_build=

arch="$(uname -m)"
#compiler=(CC=clang LLVM=1)
compiler=(CC=gcc)
parallel=(-j "$(nproc)" -l "$(nproc --ignore 1)")
measure_time=(/usr/bin/time -f 'Compile time: %es' -o '/tmp/ktime.txt')

#
# set kernel version and change directory to source code
#

if ! eselect kernel list | grep -q "$version_long" ; then
    echo "Kernel version doesn't exists: $version_long"
    eselect kernel list
    exit 1
fi
eselect kernel set "$version_long"
cd /usr/src/linux

#
# prepare initramfs files
#

gccver="$(eselect gcc show | sed 's/x86_64-pc-linux-gnu-//')"
sed "s|gcc/x86_64-pc-linux-gnu/.\+/|gcc/x86_64-pc-linux-gnu/$gccver/|g" /usr/src/initramfs/initramfs.list > /usr/src/initramfs/initramfs.list.tmp
mv /usr/src/initramfs/initramfs.list.tmp /usr/src/initramfs/initramfs.list
sed 's/use_lvmetad = 1/use_lvmetad = 0/' /etc/lvm/lvm.conf > /usr/src/initramfs/lvm.conf

#
# prepare kernel config and set build directory
#

if [[ ! -f /usr/src/linux/.config ]] ; then
    echo "zcat /proc/config.gz > /usr/src/linux/.config"
    zcat /proc/config.gz > /usr/src/linux/.config
    make "${compiler[@]}" olddefconfig
fi

if mountpoint -q /tmp ; then
    mkdir -p /tmp/usr/src/linux
    cp /usr/src/linux/.config /tmp/usr/src/linux/.config
    make mrproper
    export KBUILD_OUTPUT="/tmp/usr/src/linux"
else
    export KBUILD_OUTPUT=""
fi

#
# build kernel
#

make clean
"${measure_time[@]}" make "${compiler[@]}" "${parallel[@]}" bzImage modules

#
# install and clean up
#

rm -rfv "/lib/modules/$version_short"
make "${compiler[@]}" "${parallel[@]}" modules_install
emerge --ask=n @module-rebuild

if [[ -n $KBUILD_OUTPUT ]] ; then
    cp "$KBUILD_OUTPUT/arch/$arch/boot/bzImage" "/boot/vmlinuz-$version_short"
    cp "$KBUILD_OUTPUT"/.config /usr/src/linux/.config
    rm -r "$KBUILD_OUTPUT"
else
    cp "/usr/src/linux/arch/$arch/boot/bzImage" "/boot/vmlinuz-$version_short"
fi

#
# cleanup old kernels and update grub
#

if [[ -n $new_build ]] ; then
    echo -e "\nRemoving $KEEP_VERS old kernel versions..."
    find /boot        -maxdepth 1 -name 'vmlinuz-*' -type f | sort -V | head -n "-$KEEP_VERS" | xargs rm -fv
    find /usr/src     -maxdepth 1 -name 'linux-*'   -type d | sort -V | head -n "-$KEEP_VERS" | xargs rm -rfv
    find /lib/modules -maxdepth 1 -name '*-gentoo*' -type d | sort -V | head -n "-$KEEP_VERS" | xargs rm -rfv

    vgs | grep -q 'vg0' && vgchange -an vg0
    grub-mkconfig -o /boot/grub/grub.cfg
    vgs | grep -q 'vg0' && vgchange -ay vg0
fi

#
# output build statistics
#

echo '' && cat /tmp/ktime.txt

#!/usr/bin/env bash
set -euo pipefail

KEEP_VERS=3

if [[ $# -ne 1 ]] ; then
    echo "Kernel version argument missing!"
    eselect kernel list
    exit 1
fi

if [[ $EUID -ne 0 ]] ; then
    echo "Please run as root"
    exit 1
fi

eselect kernel set "$1" || exit 1
echo "" > "$HOME/.cache/updates.txt"

arch="$(uname -m)"
new_version="$(echo "$1" | sed s/linux-//g)"
jobs="$(nproc)"
lavg="$(nproc --ignore 1)"
parallel=(-j "$jobs" -l "$lavg")
measure_time=(/usr/bin/time -f 'Compile time: %es' -o '/tmp/ktime.txt')

cd /usr/src/linux
rm -rfv "/lib/modules/$new_version"
make clean

if [[ ! -f /usr/src/linux/.config ]] ; then
    echo "zcat /proc/config.gz > .config"
    zcat /proc/config.gz > /usr/src/linux/.config
	make olddefconfig || exit 1
fi

"${measure_time[@]}" make "${parallel[@]}" bzImage modules || exit 1
make "${parallel[@]}" modules_install
emerge --ask=n @module-rebuild

new_build="y"
[[ -f /boot/vmlinuz-$new_version ]] && new_build=

cp "arch/$arch/boot/bzImage" "/boot/vmlinuz-$new_version"

if [[ -n $new_build ]] ; then
    vgs | grep -q 'vg0' && vgchange -an vg0
    grub-mkconfig -o /boot/grub/grub.cfg
    vgs | grep -q 'vg0' && vgchange -ay vg0
fi

echo -e "\nRemoving old kernel versions..."
find /boot        -maxdepth 1 -name 'vmlinuz-*' -type f | sort -V | head -n "-$KEEP_VERS" | xargs rm -fv
find /usr/src     -maxdepth 1 -name 'linux-*'   -type d | sort -V | head -n "-$KEEP_VERS" | xargs rm -rfv
find /lib/modules -maxdepth 1 -name '*-gentoo'  -type d | sort -V | head -n "-$KEEP_VERS" | xargs rm -rfv
echo '' && cat /tmp/ktime.txt

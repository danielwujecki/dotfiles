#!/usr/bin/env bash
set -euo pipefail

# Date and time variables
DATE="$(date +%y-%m-%d)"
TIME="$(date +%H%M)"

# Base names for snapshots
ROOTSNAP_BASE="@-$DATE"
HOMESNAP_BASE="@home-$DATE"

# Full snapshot names
ROOTSNAP="$ROOTSNAP_BASE-$TIME"
HOMESNAP="$HOMESNAP_BASE-$TIME"

# Default values and options
N_KEEP="5"      # Number of snapshots to keep
QUIET=          # No output if set
FORCE=          # Force snapshot creation if set
CRON=           # Only run hourly if set
S_CREATED=      # Flag indicating if a snapshot was created

# usage() function to display script usage
usage() {
    echo "Usage: $0 [--keep=<N>] [--force] [--cron] [--quiet] [--help]"
    echo "  --keep=<N>  Number of snapshots to keep; default is 5"
    echo "  --force     Create a new snapshot even if one exists today"
    echo "  --cron      Create a new snapshot only at the top of the hour (for cron jobs)"
    echo "  --quiet     Suppress most output"
    echo "  --help      Display this help message"
    exit 0
}

while [[ $# -gt 0 ]] ; do
    case "$1" in
        --keep=*)
            N_KEEP="${1##--keep=}"
            if [[ ! $N_KEEP =~ ^[0-9]+$ ]] ; then
                [[ -n $QUIET ]] || echo "$1 is not a valid number for --keep" >&2
                exit 1
            fi
            shift
            ;;
        --force)
            FORCE="yes"
            shift
            ;;
        --cron)
            CRON="yes"
            shift
            ;;
        --quiet)
            QUIET="yes"
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            [[ -z $QUIET ]] && echo "Invalid Option: '$1'" >&2
            usage
            exit 1
            ;;
    esac
done

# Cron mode: Exit if not the top of the hour
if [[ -n "$CRON" ]] && [[ "$(date '+%M')" -ne 0 ]]; then
    exit 0
fi

# Check if the script is run as root
if [[ "$EUID" -ne 0 ]]; then
    [[ -z "$QUIET" ]] && echo "Please run as root" >&2
    exit 1
fi

# Check if the necessary Btrfs subvolumes and snapshot directory exist
if [[ ! -d "/.btrfs/@" ]]; then
    [[ -z "$QUIET" ]] && echo 'root subvolume "@" does not exist' >&2
    exit 1
fi

if [[ ! -d "/.btrfs/@home" ]]; then
    [[ -z "$QUIET" ]] && echo 'home subvolume "@home" does not exist' >&2
    exit 1
fi

if [[ ! -d "/.snapshots" ]]; then
    [[ -z "$QUIET" ]] && echo '/.snapshots directory does not exist' >&2
    exit 1
fi

# Check if snapshots with the same names already exist
if [[ -d "/.snapshots/$ROOTSNAP" || -d "/.snapshots/$HOMESNAP" ]]; then
    [[ -z "$QUIET" ]] && echo "Snapshots with names $ROOTSNAP or $HOMESNAP already exist" >&2
    exit 1
fi


FIND_ARGS=(-maxdepth 1 -type d -regextype posix-extended)
ROOT_SUBVOLS="$(find /.snapshots/ -maxdepth 1 -type d -regextype posix-extended -regex '.*/@-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{4}$')"
HOME_SUBVOLS="$(find /.snapshots/ -maxdepth 1 -type d -regextype posix-extended -regex '.*/@home-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{4}$')"

if [[ -n $FORCE ]] || ! grep -q "$ROOTSNAP_BASE" <<< "$ROOT_SUBVOLS" ; then
    btrfs subvolume snapshot -r "/.btrfs/@" "/.snapshots/$ROOTSNAP"
    S_CREATED="yes"

    echo "$ROOT_SUBVOLS" | sort -V | head -n "-$((N_KEEP-1))" | xargs -r btrfs subvolume delete
fi

if [[ -n $FORCE ]] || ! grep -q "$HOMESNAP_BASE" <<< "$HOME_SUBVOLS" ; then
    btrfs subvolume snapshot -r "/.btrfs/@home" "/.snapshots/$HOMESNAP"
    S_CREATED="yes"

    echo "$HOME_SUBVOLS" | sort -V | head -n "-$((N_KEEP-1))" | xargs -r btrfs subvolume delete
fi

[[ -n $QUIET || -z $S_CREATED ]] || ls -lAh --group-directories-first --color=auto /.snapshots
[[ -n $QUIET || -n $S_CREATED ]] || echo "Already took a snapshot today!"
